@using System.Globalization;
@using System.Web;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnv

@model EmbassiesPage

@{
    ViewData["Title"] = String.IsNullOrEmpty(Model.Country.Citizen) ? $"List of Embassies and Consulates of {Model.Country.Name} around the world in {DateTime.Now.ToString("MMMM", CultureInfo.InvariantCulture)} of {DateTime.Now.Year}." : $"List of {Model.Country.Citizen} Embassies and Consulates around the world in {DateTime.Now.ToString("MMMM", CultureInfo.InvariantCulture)} of {DateTime.Now.Year}.";
    ViewData["MetaDescription"] = $"Embassies and consulates of {Model.Country.Name} in different countries in {DateTime.Now.ToString("MMMM", CultureInfo.InvariantCulture)} of {DateTime.Now.Year}. Find the needed embassy of {Model.Country.Name} and its information. Addresses, telephone numbers, email addresses, websites, opening hours.";
    ViewData["Canonical"] = $"https://glomad.net/{Model.Header.CountryName}/Embassies";
}

@await Html.PartialAsync("_Header", Model.Header)
@await Html.PartialAsync("_Menu", Model.Header.CountryName)


<section class="container sectionstyle">

    <div class="row">

        <div class="col-md-6 px-4 text-break">
            <h2 class="text-center p-4 pb-1">List of Embassies and Consulates of @Model.Header.CountryName</h2>

            @if (Model.Embassies.Count > 0)
            {
                string curCountry = string.Empty;

                @foreach (var e in Model.Embassies)
                {
                    if (curCountry == string.Empty || !string.Equals(curCountry, e.Country))
                    {
                        <h4 class="pt-4">
                            <span class="flag-icon flag-icon-@e.Iata.ToLower() flag-icon"></span>
                            <a href="/@e.Country">@e.Country</a>
                        </h4>
                    }
                    curCountry = Model.Embassies[0].Country;


                    string title;
                    if (e.Embassy.Name != null)
                    {
                        title = Html.Raw(HttpUtility.HtmlDecode(e.Embassy.Name)) + " in " + e.City;
                    }
                    else
                    {
                        title = Html.Raw(HttpUtility.HtmlDecode($"Embassy of {Model.Country.Name} in {e.Country}, {e.City}").Replace("\n", "<br/>")).ToString();
                    }

                    @if (!string.Equals(curCountry, e.Country))
                    {
                        curCountry = e.Country;

                    }

                    <p class="mb-1">
                        <a role="button" class="embassyTitle" id="@e.Id" href="#embassyDetails-@e.Id" data-bs-toggle="modal" data-bs-target="#embassyDetails-@e.Id">@title</a>
                    </p>

                    <div id="embassyDetails-@e.Id" tabindex="-1" aria-hidden="true" class="modal fade">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">@title</h5>
                                </div>
                                <div class="modal-body">

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.Address))
                                    {
                                        <p itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                                            📍 <small class="text-muted">Address: </small>@e.Embassy.Address
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.WorkingHours))
                                    {
                                        <p>
                                            🕜 <small class="text-muted">Office hours: </small> @Html.Raw(e.Embassy.WorkingHours)
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.Phone))
                                    {
                                        <p itemprop="telephone">
                                            ☎ <small class="text-muted">Phone: </small>@Html.Raw(e.Embassy.Phone)
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.Email))
                                    {
                                        <p itemprop="email">
                                            📧 <small class="text-muted">Email: </small>@e.Embassy.Email
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.Url))
                                    {
                                        <p>
                                            💻 <small class="text-muted">Website: </small>
                                            <a href="@e.Embassy.Url" target="_blank" rel="noopener nofollow noreferrer">@e.Embassy.Url</a>
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.ApplicationFormUrl))
                                    {
                                        <p>
                                            🐱‍💻 <small class="text-muted">Visa application form: </small><a href="@e.Embassy.ApplicationFormUrl" target="_blank" rel="noopener nofollow noreferrer"> link</a>
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.ProcessingTime))
                                    {
                                        <p>
                                            🚴‍♂️ <small class="text-muted">Processing time: </small>@e.Embassy.ProcessingTime
                                        </p>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(e.Embassy.SpecialConditions))
                                    {
                                        <p>
                                            ☝ <small class="text-muted">Special conditions: </small>@e.Embassy.SpecialConditions
                                        </p>
                                    }
                                    @if (e.Latitude > 0 || e.Longitude > 0)
                                    {
                                        <p>
                                            <div class="p-2" id='map-@e.Id'></div>
                                        </p>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
                

               @* <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
                    @foreach (var e in Model.Embassies)
                    {
                        <div class="col">
                            <a href="/@Model.Header.CountryName/Embassy/@e.Id">
                                @{
                                    var countryImage = @e.Country.ToLower();
                                    var path2 = System.IO.Path.Combine(hostingEnv.WebRootPath, countryImage + ".jpg");
                                    if (!System.IO.File.Exists(path2))
                                    {
                                        countryImage = "nocover";
                                    }
                                }
                                <div class="card bg-dark text-white border-0 rounded-5 card-cover shadow-lg" style="background-image: url('../@(countryImage)_300.jpg');">
                                    @*<img src="../@(countryImage).jpg" class="img-fluid rounded-5" srcset="../@(countryImage)_300.jpg 384w, ../@(countryImage).jpg 1920w" sizes="50vw" alt="@c.Name image">*@
                                    @*<div class="card-img-overlay">
                                        <h3 class="card-title shadowed text-center align-middle mt-5 mb-3 lh-1 fw-bold">@e.Country</h3>
                                        <h5 class="card-title shadowed text-center align-middle lh-1 fw-bold">@e.City</h5>
                                    </div>*@
@*                                </div>
                            </a>
                        </div>*@
                    @*}
                </div>*@
            }
            else
            {
                <h4 class="text-center p-4">
                    The list of @Model.Header.CountryName embassies does not ready yet.
                    @await Component.InvokeAsync("SubscribeUpdates")
                    , please, to updates. We'll let you know as soon as the section is ready.
                </h4>
            }

        </div>

        <div class="col-md-6 p-4">

            <div class="position-sticky" style="top: 2rem;">

                @await Html.PartialAsync("_SubscribeUpdates")

                <div class="bg-light rounded-booking mb-3 mt-1">
                    @*<p class="m-0 px-2 py-1">All Embassies and Consulates on map</p>*@
                    <div class="p-2" id='map'></div>
                    
                </div>

                <div class="bg-light rounded-booking mb-3 mt-1">
                    <a href="https://safetywing.com?referenceID=24744359&utm_source=24744359&utm_medium=Ambassador" rel="noopener nofollow noreferrer">
                        <div class="card bg-dark text-white border-0 card-cover" style="background-image: url('../safetywind_300.jpg');">
                            <div class="card-img-overlay text-center">
                                <h3 class="card-title shadowed mt-5 lh-1 fw-bold">Global travel medical insurance</h3>
                                <p class="m-1 badge rounded-pill bg-info text-dark">for $1.5/day!</p>
                                <p class="m-1 badge rounded-pill bg-warning text-dark">Covid-19 coverage</p>
                            </div>
                        </div>
                    </a>
                </div>

            </div>
        </div>

    </div>

</section>

@section Scripts {
    <script>

        //var clearModal = function () {
        //    $('#myModel').css('display', 'none')
        //    $(".modal-content").empty();
        //}

        //var skillSlideshow = function () {

        //    $('.embassyTitle').on('click', function(e) {
        //        $('#myModel').css('display', 'block');
        //        var data = Model.Embassies[e.currentTarget.dataset.index.City
        //        console.log(data);
        //        //injecting the data into the modal
        //        const html = "<div>id:" + data.id + "</div><div>skill:" + data.Name + "</div>"
        //        $('.modal-content').html(html)
        //    })

        //    $('.close-icon').on('click', clearModal)
        //    $('#myModal').on('click', function (e) {
        //        //assuming you give proper styling to .modal-content and .modal
        //        if (e.target.id === 'myModal') clearModal()
        //    })
        //};
        //skillSlideshow();

        const hash = location.hash;
        console.log("hash", hash)
        var url = window.location.href;
        console.log("url", url)
        if (url.indexOf(hash) != -1) {
            var myModal = new bootstrap.Modal($(hash), {})
        }

        document.onreadystatechange = function () {
            myModal.show();
        };

        ymaps.ready(init);

        function init() {
            var myMap = new ymaps.Map("map", {
                center: [55.76, 37.64],
                zoom: 20
            }, {
                searchControlProvider: 'yandex#search'
            }),

                // Создаем геообъект с типом геометрии "Точка".
                myGeoObject = new ymaps.GeoObject({
                    // Описание геометрии.
                    geometry: {
                        type: "Point",
                        coordinates: [55.8, 37.8]
                    },
                    // Свойства.
                    properties: {
                        // Контент метки.
                        iconContent: 'Я тащусь',
                        hintContent: 'Ну давай уже тащи'
                    }
                }, {
                    // Опции.
                    // Иконка метки будет растягиваться под размер ее содержимого.
                    preset: 'islands#blackStretchyIcon',
                    // Метку можно перемещать.
                    draggable: true
                }),
                myPieChart = new ymaps.Placemark([
                    55.847, 37.6
                ], {
                    // Данные для построения диаграммы.
                    data: [
                        { weight: 8, color: '#0E4779' },
                        { weight: 6, color: '#1E98FF' },
                        { weight: 4, color: '#82CDFF' }
                    ],
                    iconCaption: "Диаграмма"
                }, {
                    // Зададим произвольный макет метки.
                    iconLayout: 'default#pieChart',
                    // Радиус диаграммы в пикселях.
                    iconPieChartRadius: 30,
                    // Радиус центральной части макета.
                    iconPieChartCoreRadius: 10,
                    // Стиль заливки центральной части.
                    iconPieChartCoreFillStyle: '#ffffff',
                    // Cтиль линий-разделителей секторов и внешней обводки диаграммы.
                    iconPieChartStrokeStyle: '#ffffff',
                    // Ширина линий-разделителей секторов и внешней обводки диаграммы.
                    iconPieChartStrokeWidth: 3,
                    // Максимальная ширина подписи метки.
                    iconPieChartCaptionMaxWidth: 200
                });

            myMap.geoObjects
        @foreach(var e in Model.Embassies)
        {
            @:.add(new ymaps.Placemark([@e.Embassy.Latitude, @e.Longitude], {
                @:balloonContent: '<strong>@e.Embassy.Address</strong>',
                @:iconCaption: '@e.Embassy.Name'
            @:}, {
                @:preset: 'islands#blueCircleDotIconWithCaption',
            @:iconCaptionMaxWidth: '50'
            @:}))
        }
            ;

        myMap.setBounds(
            myMap.geoObjects.getBounds(),
            {
                checkZoomRange: true,
                zoomMargin: 9,
                callback: function (err) {
                    if (err) {
                        console.log("Не удалось показать заданный регион")
                        // ...
                    }
                }
            }
        );

               // .add(myGeoObject)
               // .add(myPieChart)
                //.add(new ymaps.Placemark([55.684758, 37.738521], {
                //    balloonContent: 'цвет <strong>воды пляжа бонди</strong>'
                //}, {
                //    preset: 'islands#icon',
                //    iconColor: '#0095b6'
                //}))
                //.add(new ymaps.Placemark([55.833436, 37.715175], {
                //    balloonContent: '<strong>серобуромалиновый</strong> цвет'
                //}, {
                //    preset: 'islands#dotIcon',
                //    iconColor: '#735184'
                //}))
                //.add(new ymaps.Placemark([55.687086, 37.529789], {
                //    balloonContent: 'цвет <strong>влюбленной жабы</strong>'
                //}, {
                //    preset: 'islands#circleIcon',
                //    iconColor: '#3caa3c'
                //}))
                //.add(new ymaps.Placemark([55.782392, 37.614924], {
                //    balloonContent: 'цвет <strong>детской неожиданности</strong>'
                //}, {
                //    preset: 'islands#circleDotIcon',
                //    iconColor: 'yellow'
                //}))
                //.add(new ymaps.Placemark([55.642063, 37.656123], {
                //    balloonContent: 'цвет <strong>красный</strong>'
                //}, {
                //    preset: 'islands#redSportIcon'
                //}))
                //.add(new ymaps.Placemark([55.826479, 37.487208], {
                //    balloonContent: 'цвет <strong>фэйсбука</strong>'
                //}, {
                //    preset: 'islands#governmentCircleIcon',
                //    iconColor: '#3b5998'
                //}))
                //.add(new ymaps.Placemark([55.694843, 37.435023], {
                //    balloonContent: 'цвет <strong>носика Гены</strong>',
                //    iconCaption: 'Очень длиннный, но невероятно интересный текст'
                //}, {
                //    preset: 'islands#greenDotIconWithCaption'
                //}))
                //.add(new ymaps.Placemark([55.790139, 37.814052], {
                //    balloonContent: 'цвет <strong>голубой</strong>',
                //    iconCaption: 'Очень длиннный, но невероятно интересный текст'
                //}, {
                //    preset: 'islands#blueCircleDotIconWithCaption',
                //    iconCaptionMaxWidth: '50'
                //}));
        }
      
    </script>
}