@using API.Helpers
@using API.Models
@model VisaSearchResult

<div class="-col-md-4 mb-3">

        <div class="card rounded-5">
        <a href="/@Model.CountryName">
            <div class="card bg-dark text-white border-0 -rounded-5 card-cover shadow-lg" style="background-image: url('/@(Model.CountryName.ToLower())_300.jpg');">

                    <div class="card-img-overlay -text-center">
                        <h3 class="card-title shadowed mb-3 mt-2 lh-1 fw-bold">@Model.CountryName</h3>

                        @if (Model.Income > 0)
                        {
                        <span class="me-2 mb-2 p-2 badge rounded-pill bg-secondary">
                                🤑 Income $ @Model.Income
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.Cost))
                        {
                        <span class="me-2 mb-2 p-2 badge rounded-pill bg-secondary">
                                💰 Cost of program $ @Model.Cost
                            </span>
                        }

                        @if (Model.Reviews != null && Model.Reviews.Count > 0)
                        {
                            string simpleR = "r1";
                            string simpleT = "🤯 Complicated to get";
                            int simple = (int)Model.Reviews.Average(i => i.Simplicity) * 100 / 5;
                            if (simple > 35 && simple < 75)
                            {
                                simpleR = "r3";
                                simpleT = "🤨 Medium to get";
                            }
                            if (simple >= 75)
                            {
                                simpleR = "r5";
                                simpleT = "😎 Easy to get";
                            }

                            string waitR = "r1";
                            string waitT = "🐢 Slow processing";
                            int wait = (int)Model.Reviews.Average(i => i.Waiting) * 100 / 5;
                            if (wait > 35 && wait < 75)
                            {
                                waitR = "r3";
                                waitT = "🦘 Medium processing";
                            }
                            if (wait >= 75)
                            {
                                waitR = "r5";
                                waitT = "🐎 Fast processing";
                            }


                            int loy = (int)Model.Reviews.Average(i => i.Loyalty) * 100 / 5;
                            string loyR = "r1";
                            string loyT = "👎 Low loyality";
                            if (loy > 35 && loy < 75)
                            {
                                loyR = "r3";
                                loyT = "👌 Average loyality";
                            }
                            if (loy >= 75)
                            {
                                loyR = "r5";
                                loyT = "👋 Perfect loyality";
                            }

                            @*<p class="align-middle text-white rounded-3 py-2 px-3 bg-white-opacy">
                        @simpleT
                        </p>
                        <p class="align-middle text-white rounded-3 py-2 px-3 bg-white-opacy">
                        @waitT
                        </p>
                        <p class="align-middle text-white rounded-3 py-2 px-3 bg-white-opacy">
                        @loyT
                        </p>*@
                            <span class="me-2 mb-2 p-2 badge rounded-pill @simpleR text-dark">@simpleT</span>
                            <span class="me-2 mb-2 p-2 badge rounded-pill @waitR text-dark">@waitT</span>
                            <span class="me-2 mb-2 p-2 badge rounded-pill @loyR text-dark">@loyT</span>
                        }

                        @if (Model.IsExdendable)
                        {
                            @*<p class="align-middle text-white rounded-3 py-2 px-3 bg-white-opacy">
                        ✨ Extendable
                        </p>*@
                        <span class="me-2 mb-2 p-2 badge rounded-pill bg-secondary">
                                ✨ Extendable
                            </span>
                        }
                        @if (Model.Duration > 0)
                        {
                            @*<p class="align-middle text-white rounded-3 py-2 px-3 bg-white-opacy">
                        🕜 Duration @visa.Duration days
                        </p>*@
                        <span class="me-2 mb-2 p-2 badge rounded-pill bg-secondary">
                                🕜 Duration @Model.Duration days
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.Type))
                        {
                            <span class="me-2 mb-2 p-2 badge rounded-pill bg-secondary">
                                🐱‍👤 @Model.Type
                            </span>
                        }
                        @*<p data-utcdate="2022-08-18T17:31:16" class="m-2 badge rounded-pill bg-light text-dark">⏱ Updated: 21 days ago</p>*@

                    </div>
                </div>
            </a>
      <div class="card-body">
        <h5 class="card-title"><a class="card-title align-middle fw-bold text-decoration-none" href="/@Model.CountryName/Visa/@Model.Id">
                @Model.VisaName
            </a></h5>

                @if (Model.Reviews.Count > 0)
                {
                    <p class="align-middle rounded-3 ms-0 m-2 p-0 bg-white-opacy">
                        ⭐ @Model.Reviews.Count Reviews
                    </p>
                    @*<h5 class="card-title text-center align-middle lh-1 p-2">@visa.Reviews.Count Reviews</h5>*@
                }

                <p class="card-text">@Model.Description.Truncate(100).StripHTML()...
                    <a href="#" class="stretched-link">Continue reading</a>
                </p>
                
      </div>

            <div class="card-footer">
                <small class="text-muted">Last updated 3 mins ago</small>
            </div>

    </div>
  </div>